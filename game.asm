;//////////////////////////////////////////////////////////////////////
;  game.asm
;
; This is where the game code starts
;//////////////////////////////////////////////////////////////////////

.org $080D
.segment "STARTUP"
.segment "INIT"
.segment "ONCE"
.segment "CODE"

   jmp start

.include "x16.inc"
.include "macros.inc"

; Game Asset Location - VRAM Addresses
m_vram_L0_maps        = $00000
m_vram_L1_maps        = $00200
m_vram_tiles          = $00800
m_vram_sprite0        = $04000 ; sprite 0 data
m_vram_sprite0_attr   = $1FC00 ; sprite 0 attribute table

;------------------------------------ Constants
SPRITE_64H     = $C0
SPRITE_64W     = $30
SPRITE_32H     = $80
SPRITE_32W     = $20
SPRITE_16H     = $40
SPRITE_16W     = $10

; Keyboard Keys
SPACE           = $20
SPADE           = $41
CHAR_Q          = $51 ; "Q" key
CLR             = $93

;------------------------------------ Variables
sprite_x: .byte 150
sprite_y: .byte 100


spaceship1: .byte $00,$00,$00,$01,$10,$00,$00,$00
            .byte $00,$00,$00,$01,$10,$00,$00,$00
            .byte $00,$00,$00,$11,$11,$00,$00,$00
            .byte $00,$00,$00,$18,$81,$00,$00,$00
            .byte $00,$00,$00,$8c,$c8,$00,$00,$00
            .byte $00,$00,$00,$8c,$c8,$00,$00,$00
            .byte $00,$00,$02,$8c,$c8,$20,$00,$00
            .byte $00,$00,$02,$8c,$c8,$20,$00,$00
            .byte $00,$00,$01,$8c,$c8,$10,$00,$00
            .byte $00,$08,$81,$18,$81,$18,$80,$00
            .byte $08,$81,$11,$18,$81,$11,$18,$80
            .byte $01,$11,$11,$11,$11,$11,$11,$10
            .byte $01,$11,$11,$11,$11,$11,$11,$10
            .byte $00,$08,$11,$18,$81,$11,$80,$00
            .byte $00,$08,$10,$18,$81,$01,$80,$00
            .byte $00,$02,$20,$18,$81,$02,$20,$00

; globals:
sky: ; 32 x 32 (only populating first 8 rows)
.byte $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00
.byte $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00
.byte $01,$00, $01,$00, $01,$00, $02,$00, $03,$00, $04,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $02,$00, $03,$00, $04,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $02,$00, $03,$00, $04,$00, $01,$00, $01,$00
.byte $01,$00, $01,$00, $01,$00, $04,$0c, $05,$08, $04,$08, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $04,$0c, $05,$08, $04,$08, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $04,$0c, $05,$08, $04,$08, $01,$00, $01,$00
.byte $04,$04, $04,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $02,$00, $03,$00, $04,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $02,$00, $03,$00, $04,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00
.byte $04,$0c, $04,$08, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $04,$0c, $05,$08, $04,$08, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $04,$0c, $05,$08, $04,$08, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00
.byte $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00
.byte $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00, $01,$00

ground: ; 32 x 32 (only populating first 15 rows)
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00
.byte $08,$00, $08,$04, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $08,$00, $08,$04, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $08,$00, $08,$04, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $00,$00, $08,$00, $08,$04, $00,$00, $00,$00, $00,$00
.byte $09,$00, $09,$04, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $09,$00, $09,$04, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $09,$00, $09,$04, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $07,$00, $09,$00, $09,$04, $07,$00, $07,$00, $07,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00
.byte $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00, $06,$00

end_maps:
MAPS_SIZE = end_maps-sky

tiles:
      ; Tile 0
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00

      ; Tile 1
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33

      ; Tile 2
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$3f
.byte $33,$33,$3f,$f1
.byte $33,$3f,$f1,$11
.byte $33,$f1,$11,$11
.byte $3f,$11,$11,$1f

      ; Tile 3
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $ff,$f3,$33,$33
.byte $11,$1f,$f3,$33
.byte $11,$11,$1f,$ff
.byte $1f,$11,$11,$11
.byte $f1,$11,$11,$11

      ; Tile 4
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $ff,$ff,$f3,$33
.byte $11,$11,$1f,$33
.byte $11,$11,$11,$f3

      ; Tile 5
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $33,$33,$33,$33
.byte $ff,$ff,$ff,$ff
.byte $11,$11,$11,$11
.byte $11,$11,$11,$f1

      ; Tile 6
.byte $55,$55,$d5,$55
.byte $55,$55,$d5,$55
.byte $5d,$55,$5d,$55
.byte $5d,$55,$5d,$55
.byte $d5,$55,$55,$55
.byte $d5,$55,$55,$55
.byte $5d,$55,$5d,$55
.byte $5d,$55,$5d,$55

      ; Tile 7
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $0d,$00,$d0,$0d
.byte $55,$55,$55,$55
.byte $55,$55,$55,$55

      ; Tile 8
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$00
.byte $00,$00,$00,$55
.byte $00,$00,$55,$55
.byte $00,$00,$55,$55
.byte $00,$05,$55,$55
.byte $00,$05,$55,$55

      ; Tile 9
.byte $00,$05,$55,$55
.byte $00,$00,$55,$55
.byte $00,$00,$05,$95
.byte $00,$00,$00,$09
.byte $00,$00,$00,$09
.byte $0d,$00,$d0,$09
.byte $55,$55,$55,$99
.byte $55,$55,$59,$95

end_tiles:
TILES_SIZE = end_tiles-tiles

start:

;------------------------------------ Initialize the game
    ;lda #$06 ; 4bpp bitmap
    ;sta VERA_L0_config
    ;lda #64 ; 2x scale
    lda #32 
    sta VERA_dc_hscale
    sta VERA_dc_vscale  
    
    ; configure layer 0: space
    lda #$02 ; 32x32 4bpp tiles
    sta VERA_L0_config
    lda #(m_vram_L0_maps >> 9)
    sta VERA_L0_mapbase
    lda #(m_vram_tiles >> 9) ; 8x8 tiles
    sta VERA_L0_tilebase
    stz VERA_L0_hscroll_l ; horizontal scroll = 0
    stz VERA_L0_hscroll_h
    stz VERA_L0_vscroll_l ; vertical scroll = 0
    stz VERA_L0_vscroll_h
    
   

    ;; configure layer 1: Front Layer
    lda #$02 ; 32x32 4bpp tiles
    sta VERA_L1_config
    lda #(m_vram_L1_maps >> 9)
    sta VERA_L1_mapbase
    lda #(m_vram_tiles >> 9) ; 8x8 tiles
    sta VERA_L1_tilebase
    stz VERA_L1_hscroll_l ; horizontal scroll = 0
    stz VERA_L1_hscroll_h
    stz VERA_L1_vscroll_l ; vertical scroll = 0
    stz VERA_L1_vscroll_h

    ; copy tile maps to VRAM
    RAM_TO_VRAM sky, m_vram_L0_maps, MAPS_SIZE
    ; copy tiles to VRAM
    RAM_TO_VRAM tiles, m_vram_tiles, TILES_SIZE

    ;VERA_SET_ADDR m_vram_Sprite0,1
    RAM_TO_VRAM spaceship1, m_vram_sprite0, 128


    VERA_SET_ADDR m_vram_sprite0_attr,1
    lda #<(m_vram_sprite0 >> 5)
    sta VERA_data0
    lda #>(m_vram_sprite0 >> 5)
    sta VERA_data0

    lda sprite_x
    sta VERA_data0  ; x attribute
    stz VERA_data0  ; zero out high byte
    lda sprite_y
    sta VERA_data0 ; y attribute
    stz VERA_data0 ; zero out high byte
    lda #$0C        ; z-level
    sta VERA_data0
    lda #(SPRITE_16H | SPRITE_16W | 1)
    ;lda #$F0 ;(SPRITE_64H | SPRITE_64W)    ; palette offset
    sta VERA_data0


    ; Enable sprites
    stz VERA_ctrl        ; Set DCSEL to 0
    lda VERA_dc_video
    ora #$40          ; Enable sprites
    sta VERA_dc_video

;------------------------------------ Start the Game Loop
main_loop:

    jsr GETIN          ; Read a character from the keyboard
    cmp #$57           ; Compare with 'W' (up)
    beq move_up
    cmp #$41           ; Compare with 'A' (left)
    beq move_left
    cmp #$53           ; Compare with 'S' (down)
    beq move_down
    cmp #$44           ; Compare with 'D' (right)
    beq move_right
    cmp #$1E           ; Compare with cursor up
    beq move_up
    cmp #$1D           ; Compare with cursor left
    beq move_left
    cmp #$1F           ; Compare with cursor down
    beq move_down
    cmp #$1C           ; Compare with cursor right
    beq move_right
    cmp #$1B           ; Compare with ESC key
    beq exit_game
    jmp main_loop      ; Loop back to read the next character

;------------------------------------ End of Game Loop


;------------------------------------ Game Subroutines
move_up:
    lda sprite_y
    sec
    sbc #1             ; Decrease Y coordinate
    sta sprite_y
    jsr update_sprite_position
    jmp main_loop

move_left:
    lda sprite_x
    sec
    sbc #1             ; Decrease X coordinate
    sta sprite_x
    jsr update_sprite_position
    jmp main_loop

move_down:
    lda sprite_y
    clc
    adc #1             ; Increase Y coordinate
    sta sprite_y
    jsr update_sprite_position
    jmp main_loop

move_right:
    lda sprite_x
    clc
    adc #1             ; Increase X coordinate
    sta sprite_x
    jsr update_sprite_position
    jmp main_loop    


update_sprite_position:
    ; Update the sprite position in VRAM
    VERA_SET_ADDR m_vram_sprite0_attr,1
    lda sprite_x
    sta VERA_data0     ; Update X coordinate
    stz VERA_data0     ; Zero out high byte
    lda sprite_y
    sta VERA_data0     ; Update Y coordinate
    stz VERA_data0     ; Zero out high byte
    rts

exit_game:
    ; Code to exit the game
    rts    


;------------------------------------ End of Game Subroutines